name: 'Cypress E2E Tests'

on:
  push:
    branches: [main, develop]
    paths:
      - 'frontend/**'
      - 'backend/**'
      - '.github/workflows/cypress.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'frontend/**'
      - 'backend/**'
      - '.github/workflows/cypress.yml'
  workflow_dispatch:

jobs:
  # Install and cache dependencies
  install:
    runs-on: ubuntu-latest
    outputs:
      cypress-cache-key: ${{ steps.cache-cypress.outputs.cache-hit }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Cache Cypress binary
        id: cache-cypress
        uses: actions/cache@v4
        with:
          path: ~/.cache/Cypress
          key: cypress-${{ runner.os }}-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            cypress-${{ runner.os }}-

      - name: Install dependencies
        working-directory: frontend
        run: npm ci

      - name: Install Cypress
        if: steps.cache-cypress.outputs.cache-hit != 'true'
        working-directory: frontend
        run: npx cypress install

  # Lint and type check
  quality-checks:
    runs-on: ubuntu-latest
    needs: install
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: frontend
        run: npm ci

      - name: Type check
        working-directory: frontend
        run: npm run type-check

      - name: Lint
        working-directory: frontend
        run: npm run lint

      - name: Check Cypress tests
        working-directory: frontend
        run: npx tsc --noEmit --project cypress/tsconfig.json

  # Run unit tests
  unit-tests:
    runs-on: ubuntu-latest
    needs: install
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: frontend
        run: npm ci

      - name: Run unit tests
        working-directory: frontend
        run: npm run test:coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: frontend/coverage/lcov.info
          flags: frontend-unit
          name: frontend-unit-tests

  # E2E tests with mocked API
  e2e-mocked:
    runs-on: ubuntu-latest
    needs: [install, quality-checks]
    strategy:
      fail-fast: false
      matrix:
        containers: [1, 2, 3] # Parallel execution
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Restore Cypress binary cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/Cypress
          key: cypress-${{ runner.os }}-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            cypress-${{ runner.os }}-

      - name: Install dependencies
        working-directory: frontend
        run: npm ci

      - name: Build frontend
        working-directory: frontend
        run: npm run build
        env:
          VITE_API_URL: http://localhost:5000
          VITE_STRIPE_PUBLISHABLE_KEY: pk_test_mock
          VITE_MAPBOX_TOKEN: pk.mock_token

      - name: Start frontend server
        working-directory: frontend
        run: npm run preview &
        env:
          PORT: 4173

      - name: Wait for server
        run: npx wait-on http://localhost:4173

      - name: Run Cypress E2E tests (Mocked)
        working-directory: frontend
        run: npx cypress run --record --parallel --ci-build-id ${{ github.run_id }}-mocked
        env:
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          CYPRESS_PROJECT_ID: ${{ secrets.CYPRESS_PROJECT_ID }}
          CYPRESS_baseUrl: http://localhost:4173
          CYPRESS_MOCK_API: true
          CYPRESS_TEST_USER_EMAIL: testuser@capsight.com
          CYPRESS_TEST_USER_PASSWORD: TestPass123!
          CYPRESS_TEST_ADMIN_EMAIL: admin@capsight.com
          CYPRESS_TEST_ADMIN_PASSWORD: AdminPass123!
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload screenshots
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: cypress-screenshots-mocked-${{ matrix.containers }}
          path: frontend/cypress/screenshots
          retention-days: 7

      - name: Upload videos
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: cypress-videos-mocked-${{ matrix.containers }}
          path: frontend/cypress/videos
          retention-days: 7

  # E2E tests with real backend (only on main branch)
  e2e-integration:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [install, quality-checks, unit-tests]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_USER: testuser
          POSTGRES_DB: capsight_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install Python dependencies
        working-directory: backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run database migrations
        working-directory: backend
        run: alembic upgrade head
        env:
          DATABASE_URL: postgresql://testuser:testpassword@localhost:5432/capsight_test

      - name: Start backend server
        working-directory: backend
        run: uvicorn app.main:app --host 0.0.0.0 --port 5000 &
        env:
          DATABASE_URL: postgresql://testuser:testpassword@localhost:5432/capsight_test
          REDIS_URL: redis://localhost:6379
          SECRET_KEY: test-secret-key-for-ci
          ENVIRONMENT: test

      - name: Wait for backend
        run: npx wait-on http://localhost:5000/health

      - name: Restore Cypress binary cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/Cypress
          key: cypress-${{ runner.os }}-${{ hashFiles('frontend/package-lock.json') }}

      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci

      - name: Build frontend
        working-directory: frontend
        run: npm run build
        env:
          VITE_API_URL: http://localhost:5000
          VITE_STRIPE_PUBLISHABLE_KEY: ${{ secrets.STRIPE_PUBLISHABLE_KEY_TEST }}
          VITE_MAPBOX_TOKEN: ${{ secrets.MAPBOX_TOKEN }}

      - name: Start frontend server
        working-directory: frontend
        run: npm run preview &
        env:
          PORT: 4173

      - name: Wait for frontend
        run: npx wait-on http://localhost:4173

      - name: Seed test data
        working-directory: backend
        run: python scripts/seed_test_data.py
        env:
          DATABASE_URL: postgresql://testuser:testpassword@localhost:5432/capsight_test

      - name: Run Cypress E2E tests (Integration)
        working-directory: frontend
        run: npx cypress run --record --ci-build-id ${{ github.run_id }}-integration
        env:
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          CYPRESS_PROJECT_ID: ${{ secrets.CYPRESS_PROJECT_ID }}
          CYPRESS_baseUrl: http://localhost:4173
          CYPRESS_API_URL: http://localhost:5000
          CYPRESS_MOCK_API: false
          CYPRESS_TEST_USER_EMAIL: testuser@capsight.com
          CYPRESS_TEST_USER_PASSWORD: TestPass123!
          CYPRESS_TEST_ADMIN_EMAIL: admin@capsight.com
          CYPRESS_TEST_ADMIN_PASSWORD: AdminPass123!

      - name: Upload integration screenshots
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: cypress-screenshots-integration
          path: frontend/cypress/screenshots
          retention-days: 30

      - name: Upload integration videos
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: cypress-videos-integration
          path: frontend/cypress/videos
          retention-days: 30

  # Collect and report results
  results:
    if: always()
    runs-on: ubuntu-latest
    needs: [quality-checks, unit-tests, e2e-mocked, e2e-integration]
    steps:
      - name: Check test results
        run: |
          echo "Quality Checks: ${{ needs.quality-checks.result }}"
          echo "Unit Tests: ${{ needs.unit-tests.result }}"
          echo "E2E Mocked: ${{ needs.e2e-mocked.result }}"
          echo "E2E Integration: ${{ needs.e2e-integration.result }}"
          
          if [[ "${{ needs.quality-checks.result }}" != "success" ]] || \
             [[ "${{ needs.unit-tests.result }}" != "success" ]] || \
             [[ "${{ needs.e2e-mocked.result }}" != "success" ]]; then
            echo "Required tests failed"
            exit 1
          fi
          
          if [[ "${{ github.ref }}" == "refs/heads/main" ]] && \
             [[ "${{ needs.e2e-integration.result }}" != "success" ]]; then
            echo "Integration tests failed on main branch"
            exit 1
          fi
          
          echo "All tests passed!"

      - name: Post results to PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const results = {
              quality: '${{ needs.quality-checks.result }}',
              unit: '${{ needs.unit-tests.result }}',
              e2e: '${{ needs.e2e-mocked.result }}',
              integration: '${{ needs.e2e-integration.result }}'
            };
            
            const passed = Object.values(results).filter(r => r === 'success').length;
            const total = Object.keys(results).length;
            
            const status = passed === total ? '✅' : '❌';
            const body = `
            ## Test Results ${status}
            
            | Test Suite | Result |
            |------------|--------|
            | Quality Checks | ${results.quality === 'success' ? '✅' : '❌'} |
            | Unit Tests | ${results.unit === 'success' ? '✅' : '❌'} |
            | E2E (Mocked) | ${results.e2e === 'success' ? '✅' : '❌'} |
            | E2E (Integration) | ${results.integration === 'success' ? '✅' : results.integration === 'skipped' ? '⏭️ Skipped' : '❌'} |
            
            **${passed}/${total} test suites passed**
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });
