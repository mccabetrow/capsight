version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: capsight_db
      POSTGRES_USER: capsight
      POSTGRES_PASSWORD: password123
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U capsight -d capsight_db"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - capsight-network

  # Redis for caching and background tasks
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - capsight-network

  # Backend API
  backend:
    build:
      context: .
      dockerfile: docker/Dockerfile.backend
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://capsight:password123@postgres:5432/capsight_db
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=your-secret-key-change-in-production
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      - ZILLOW_API_KEY=${ZILLOW_API_KEY}
      - REDFIN_API_KEY=${REDFIN_API_KEY}
      - FRED_API_KEY=${FRED_API_KEY}
    volumes:
      - ./ml:/app/ml
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - capsight-network

  # Frontend
  frontend:
    build:
      context: .
      dockerfile: docker/Dockerfile.frontend
    ports:
      - "3000:80"
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - capsight-network

  # Background worker for ML training and data ingestion
  worker:
    build:
      context: .
      dockerfile: docker/Dockerfile.backend
    command: celery -A app.worker worker --loglevel=info
    environment:
      - DATABASE_URL=postgresql://capsight:password123@postgres:5432/capsight_db
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=your-secret-key-change-in-production
      - ZILLOW_API_KEY=${ZILLOW_API_KEY}
      - REDFIN_API_KEY=${REDFIN_API_KEY}
      - FRED_API_KEY=${FRED_API_KEY}
    volumes:
      - ./ml:/app/ml
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - capsight-network

  # Celery Beat Scheduler
  scheduler:
    build:
      context: .
      dockerfile: docker/Dockerfile.backend
    command: celery -A app.worker beat --loglevel=info
    environment:
      - DATABASE_URL=postgresql://capsight:password123@postgres:5432/capsight_db
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=your-secret-key-change-in-production
    volumes:
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - capsight-network

volumes:
  postgres_data:
  redis_data:

networks:
  capsight-network:
    driver: bridge
